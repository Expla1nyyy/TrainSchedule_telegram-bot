import requests
import json
from datetime import datetime, timedelta
import logging
import pickle
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import pytz


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SELECTING_ACTION, CHOOSING_STATION_FROM, CHOOSING_STATION_TO, SAVING_ROUTE, MANAGING_ROUTES = range(5)


API_KEY = "YaAPI"  # <- —è–Ω–¥–µ–∫—Å API –∫–ª—é—á —Å—é–¥–∞
API_URL = "https://api.rasp.yandex.net/v3.0/search/"


ROUTES_FILE = "user_routes.pkl"

POPULAR_STATIONS = { 
    "–ú–æ—Å–∫–≤–∞ (–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –≤–æ–∫–∑–∞–ª)": "s2006004",
    "–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫ (–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∞—è)": "s9603468",
    "–ö–ª–∏–Ω": "s9602944", 
    "–¢–≤–µ—Ä—å": "s9603093",
    "–¢–æ—Ä–∂–æ–∫": "s9603013",
}

class YandexScheduleBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.user_routes = self.load_routes()
        self.setup_handlers()
    
    def load_routes(self):
        if os.path.exists(ROUTES_FILE):
            try:
                with open(ROUTES_FILE, 'rb') as f:
                    return pickle.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return {}
    
    def save_routes(self):
        try:
            with open(ROUTES_FILE, 'wb') as f:
                pickle.dump(self.user_routes, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
    
    def get_user_routes(self, user_id: int):
        return self.user_routes.get(user_id, [])
    
    def add_user_route(self, user_id: int, route_name: str, from_station: str, from_name: str, to_station: str, to_name: str):
        if user_id not in self.user_routes:
            self.user_routes[user_id] = []
        
        for route in self.user_routes[user_id]:
            if route['from_station'] == from_station and route['to_station'] == to_station:
                return False
        
        route_data = {
            'name': route_name,
            'from_station': from_station,
            'from_name': from_name,
            'to_station': to_station,
            'to_name': to_name,
            'created_at': datetime.now()
        }
        
        self.user_routes[user_id].append(route_data)
        self.save_routes()
        return True
    
    def delete_user_route(self, user_id: int, route_index: int):
        if user_id in self.user_routes and 0 <= route_index < len(self.user_routes[user_id]):
            del self.user_routes[user_id][route_index]
            if not self.user_routes[user_id]:
                del self.user_routes[user_id]
            self.save_routes()
            return True
        return False
    
    def setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SELECTING_ACTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_main_menu)
                ],
                CHOOSING_STATION_FROM: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_station_from)
                ],
                CHOOSING_STATION_TO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_station_to)
                ],
                SAVING_ROUTE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_save_route)
                ],
                MANAGING_ROUTES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_manage_routes)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler("myroutes", self.show_my_routes))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.message.from_user
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä", user.first_name)
        
        context.user_data.pop('waiting_for_route_name', None)
        
        user_routes = self.get_user_routes(user.id)
        
        keyboard = [
            ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
            ["‚≠ê –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã"] if user_routes else ["‚≠ê –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"],
        ]
        
        if user_routes:
            for route in user_routes[:3]:
                keyboard.append([f"üöÜ {route['name']}"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex.API.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return SELECTING_ACTION
    
    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text = update.message.text
        user_id = update.message.from_user.id
        
        user_routes = self.get_user_routes(user_id)
        for i, route in enumerate(user_routes):
            if f"üöÜ {route['name']}" == text:

                context.user_data['from_station'] = route['from_station']
                context.user_data['from_station_name'] = route['from_name']
                context.user_data['to_station'] = route['to_station']
                context.user_data['to_station_name'] = route['to_name']
                await self.get_schedule(update, context, is_favorite=True)
                return await self.start(update, context)
        
        if "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text.lower():
            return await self.ask_station_from(update, context)
        
        elif "–º–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã" in text.lower() or "–º–∞—Ä—à—Ä—É—Ç" in text.lower():
            return await self.manage_routes(update, context)
        
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return SELECTING_ACTION
    
    async def ask_station_from(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        keyboard = [[station] for station in POPULAR_STATIONS.keys()]
        keyboard.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å—Ç–∞–Ω—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        return CHOOSING_STATION_FROM
    
    async def handle_station_from(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        station_name = update.message.text
        
        if "–Ω–∞–∑–∞–¥" in station_name.lower():
            return await self.start(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if station_name in POPULAR_STATIONS:
            context.user_data['from_station'] = POPULAR_STATIONS[station_name]
            context.user_data['from_station_name'] = station_name
        else:
            # –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            station_code, full_name = await self.search_station(station_name)
            if station_code:
                context.user_data['from_station'] = station_code
                context.user_data['from_station_name'] = full_name
            else:
                await update.message.reply_text("‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return CHOOSING_STATION_FROM
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        keyboard = [[station] for station in POPULAR_STATIONS.keys()]
        keyboard.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {context.user_data['from_station_name']}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_STATION_TO
    
    async def handle_station_to(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        station_name = update.message.text
        
        if "–Ω–∞–∑–∞–¥" in station_name.lower():
            return await self.ask_station_from(update, context)
        
        if station_name in POPULAR_STATIONS:
            context.user_data['to_station'] = POPULAR_STATIONS[station_name]
            context.user_data['to_station_name'] = station_name
        else:
            station_code, full_name = await self.search_station(station_name)
            if station_code:
                context.user_data['to_station'] = station_code
                context.user_data['to_station_name'] = full_name
            else:
                await update.message.reply_text("‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return CHOOSING_STATION_TO

        await self.show_schedule(update, context)
        
        user_routes = self.get_user_routes(update.message.from_user.id)
        if len(user_routes) < 10: 
            keyboard = [["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"], ["‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞?",
                reply_markup=reply_markup
            )
            return SAVING_ROUTE
        else:
            await update.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (10)")
            return await self.start(update, context)
    
    async def handle_save_route(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text = update.message.text
        
        if "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" in text.lower():
            await update.message.reply_text(
                "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–†–∞–±–æ—Ç–∞-–¥–æ–º'):",
                reply_markup=ReplyKeyboardRemove()
            )
            context.user_data['waiting_for_route_name'] = True
            return SAVING_ROUTE
        
        elif "–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å" in text.lower():
            return await self.start(update, context)
        
        elif context.user_data.get('waiting_for_route_name'):
            route_name = text.strip()
            user_id = update.message.from_user.id
            
            if route_name:
                from_station = context.user_data.get('from_station')
                from_name = context.user_data.get('from_station_name')
                to_station = context.user_data.get('to_station')
                to_name = context.user_data.get('to_station_name')
                
                if self.add_user_route(user_id, route_name, from_station, from_name, to_station, to_name):
                    await update.message.reply_text(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                else:
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            
            context.user_data.pop('waiting_for_route_name', None)
            return await self.start(update, context)
        
        else:
            return await self.start(update, context)
    
    async def show_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞)"""
        try:
            from_station = context.user_data.get('from_station')
            to_station = context.user_data.get('to_station')
            from_name = context.user_data.get('from_station_name')
            to_name = context.user_data.get('to_station_name')
            
            if not from_station or not to_station:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏")
                return
            
            params = {
                "apikey": API_KEY,
                "format": "json",
                "from": from_station,
                "to": to_station,
                "lang": "ru_RU",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "transport_types": "suburban",
                "limit": 50
            }
            
            response = requests.get(API_URL, params=params, timeout=10)
            data = response.json()
            
            if 'segments' not in data or not data['segments']:
                await update.message.reply_text("‚ùå –†–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                return
            
            now_utc = datetime.now(pytz.UTC)
            
            upcoming_trains = []
            
            for segment in data['segments']:
                departure_time = datetime.strptime(segment['departure'], '%Y-%m-%dT%H:%M:%S%z')
                
                if departure_time >= now_utc:
                    upcoming_trains.append(segment)
            
            upcoming_trains.sort(key=lambda x: x['departure'])
            
            if not upcoming_trains:
                await self.show_tomorrow_schedule(update, from_station, to_station, from_name, to_name)
                return
            
            message = f"üöÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫:*\n"
            message += f"üìç *{from_name}* ‚Üí *{to_name}*\n"
            message += f"üìÖ *{datetime.now().strftime('%d.%m.%Y')}*\n\n"
            
            for segment in upcoming_trains[:8]:
                departure = datetime.strptime(segment['departure'], '%Y-%m-%dT%H:%M:%S%z')
                arrival = datetime.strptime(segment['arrival'], '%Y-%m-%dT%H:%M:%S%z')
                
                time_until_departure = departure - now_utc
                total_minutes = int(time_until_departure.total_seconds() // 60)
                hours_until = total_minutes // 60
                minutes_until = total_minutes % 60
                
                time_until_text = ""
                if hours_until > 0:
                    time_until_text = f"‚è≥ –ß–µ—Ä–µ–∑ {hours_until}—á {minutes_until}–º–∏–Ω"
                else:
                    time_until_text = f"‚è≥ –ß–µ—Ä–µ–∑ {minutes_until}–º–∏–Ω"
                
                departure_local = departure.astimezone().strftime('%H:%M')
                arrival_local = arrival.astimezone().strftime('%H:%M')
                
                message += (
                    f"üïê *{departure_local}* - {arrival_local}\n"
                    f"üöÑ {segment['thread']['title']}\n"
                    f"‚è± –í –ø—É—Ç–∏: {segment['duration'] // 60} –º–∏–Ω\n"
                    f"{time_until_text}\n"
                    f"‚Äî‚Äî\n"
                )
            
            if len(upcoming_trains) > 8:
                message += f"\n... –∏ –µ—â–µ {len(upcoming_trains) - 8} —Ä–µ–π—Å–æ–≤"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    async def get_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_favorite: bool = False):
        await self.show_schedule(update, context)
    
    async def show_tomorrow_schedule(self, update: Update, from_station: str, to_station: str, from_name: str, to_name: str):
        try:
            tomorrow = datetime.now() + timedelta(days=1)
            
            params = {
                "apikey": API_KEY,
                "format": "json",
                "from": from_station,
                "to": to_station,
                "lang": "ru_RU",
                "date": tomorrow.strftime("%Y-%m-%d"),
                "transport_types": "suburban",
                "limit": 5
            }
            
            response = requests.get(API_URL, params=params, timeout=10)
            data = response.json()
            
            if 'segments' not in data or not data['segments']:
                await update.message.reply_text("‚ùå –†–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
                return
            
            message = f"üöÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n"
            message += f"üìç *{from_name}* ‚Üí *{to_name}*\n"
            message += f"üìÖ *{tomorrow.strftime('%d.%m.%Y')}*\n\n"
            
            for segment in data['segments'][:5]:
                departure = datetime.strptime(segment['departure'], '%Y-%m-%dT%H:%M:%S%z')
                arrival = datetime.strptime(segment['arrival'], '%Y-%m-%dT%H:%M:%S%z')
                
                departure_local = departure.astimezone().strftime('%H:%M')
                arrival_local = arrival.astimezone().strftime('%H:%M')
                
                message += (
                    f"üïê *{departure_local}* - {arrival_local}\n"
                    f"üöÑ {segment['thread']['title']}\n"
                    f"‚è± –í –ø—É—Ç–∏: {segment['duration'] // 60} –º–∏–Ω\n"
                    f"‚Äî‚Äî\n"
                )
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–µ–π—Å–æ–≤ –Ω–µ—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    
    async def manage_routes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user_id = update.message.from_user.id
        user_routes = self.get_user_routes(user_id)
        
        if not user_routes:
            keyboard = [["üìÖ –ù–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"], ["‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.",
                reply_markup=reply_markup
            )
            return SELECTING_ACTION
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []
        for i, route in enumerate(user_routes):
            keyboard.append([f"‚ùå –£–¥–∞–ª–∏—Ç—å {route['name']}"])
            keyboard.append([f"üöÜ {route['name']}"])
        
        keyboard.append(["üìÖ –ù–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        routes_list = "\n".join([f"üöÜ {route['name']} ({route['from_name']} ‚Üí {route['to_name']})" 
                               for route in user_routes])
        
        await update.message.reply_text(
            f"‚≠ê –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:\n\n{routes_list}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return MANAGING_ROUTES
    
    async def handle_manage_routes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text = update.message.text
        user_id = update.message.from_user.id
        
        if "–Ω–∞–∑–∞–¥" in text.lower() or "–≥–ª–∞–≤–Ω–æ–µ" in text.lower():
            return await self.start(update, context)
        
        elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text.lower():
            return await self.ask_station_from(update, context)
        
        elif "—É–¥–∞–ª–∏—Ç—å" in text.lower():
            # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
            route_name = text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "").strip()
            user_routes = self.get_user_routes(user_id)
            
            for i, route in enumerate(user_routes):
                if route['name'] == route_name:
                    self.delete_user_route(user_id, i)
                    await update.message.reply_text(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É–¥–∞–ª–µ–Ω")
                    break
            
            return await self.manage_routes(update, context)
        
        elif text.startswith("üöÜ "):
            route_name = text.replace("üöÜ ", "").strip()
            user_routes = self.get_user_routes(user_id)
            for route in user_routes:
                if route['name'] == route_name:
                    context.user_data['from_station'] = route['from_station']
                    context.user_data['from_station_name'] = route['from_name']
                    context.user_data['to_station'] = route['to_station']
                    context.user_data['to_station_name'] = route['to_name']
                    await self.get_schedule(update, context, is_favorite=True)
                    break
            
            return await self.manage_routes(update, context)
        
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return MANAGING_ROUTES
    
    async def show_my_routes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.manage_routes(update, context)
    
    async def search_station(self, station_name: str) -> tuple:

        try:
            url = "https://api.rasp.yandex.net/v3.0/stations_list/"
            params = {
                "apikey": API_KEY,
                "format": "json",
                "lang": "ru_RU",
                "station": station_name
            }
            
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data.get('countries'):
                for country in data['countries']:
                    for region in country.get('regions', []):
                        for settlement in region.get('settlements', []):
                            for station in settlement.get('stations', []):
                                if station_name.lower() in station['title'].lower():
                                    return station['codes']['yandex_code'], station['title']
            
            return None, None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏: {e}")
            return None, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏: {e}")
            return None, None
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.message.from_user
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä", user.first_name)
        
        context.user_data.pop('waiting_for_route_name', None)
        
        await update.message.reply_text(
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –Ω–∞–ø–∏—à–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    BOT_TOKEN = "BotKey"
    
    global API_KEY
    API_KEY = "YaAPI"
    
    if BOT_TOKEN == "" or API_KEY == "":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à BOT_TOKEN –∏ API_KEY")
        return
    
    bot = YandexScheduleBot(BOT_TOKEN)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.run()

if __name__ == '__main__':
    main()